AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: sts-broker-core

Globals:
  Function:
    Timeout: 10

Metadata:
  AWS::ServerlessRepo::Application:
    Name: STSBroker
    Description: This project can be used as a reference for a serverless custom Identity Broker architecture.
    Author: Timoteo Nascimento
    SpdxLicenseId: Apache-2.0
    LicenseUrl: ../LICENSE
    ReadmeUrl: ../README.md
    Labels: ['lambda', 'iam', 'sts', 'identity', 'broker']
    HomePageUrl: https://github.com/nascit/sts-broker
    SemanticVersion: 0.0.4
    SourceCodeUrl: https://github.com/nascit/sts-broker

Parameters:
  CognitoUserPoolName:
    Type: String
    Default: STSBrokerUserPool
  CognitoUserPoolClientName:
    Type: String
    Default: STSBrokerUserPoolClient
  CognitoUserPoolDomainName:
    Type: String
    Default: 'stsbroker'
  RequestTableName:
    Description: Name of the DynamoDB Table storing the requests for temporary credentials
    Type: String
    Default: permission_requests
  TeamPreferencesTableName:
    Description: Name of the DynamoDB Table storing the team info/preferences
    Type: String
    Default: team_preferences
  PoliciesTableName:
    Description: Name of the DynamoDB Table storing STS Broker policies
    Type: String
    Default: policies
  TempCredentialsTableName:
    Description: Name of the DynamoDB Table storing the temporary credentials
    Type: String
    Default: temp_credentials
  DefaultSecurityAdminEmailID:
    AllowedPattern: '^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$'
    ConstraintDescription: This is not a valid email id
    Description: Default Approver Email ID
    MaxLength: '64'
    MinLength: '1'
    Type: String
  Stage:
    Description: Stage name (Dev, Prod)
    AllowedValues:
      - Dev
      - Prod
    Type: String
    Default: Prod
    ConstraintDescription: Must specify Prod or Dev
  EvaluateLambdaRuntime:
    Type: String
    Description: The "EvaluatePermissionRequest" Lambda Function Runtime
    Default: nodejs12.x
    AllowedValues:
      - dotnetcore2.1
      - go1.x
      - nodejs12.x
      - java11
      - java8
      - python3.7
      - pythin3.8
      - ruby2.7
  EvaluatePermissionRequestCodeUriBucket:
    Description: S3 Uri location for the "EvaluatePermissionRequest" Lambda deployment
      package (S3 Bucket)
    Type: String
    Default: ''
  EvaluatePermissionRequestCodeUriKey:
    AllowedPattern: (^$|.*(zip))
    ConstraintDescription: This must be a .zip file.
    Description: S3 Uri location for the "EvaluatePermissionRequest" Lambda deployment
      package (S3 Bucket key)
    Type: String
    Default: ''

Conditions:
  HasEvaluatePermissionRequestCodeUri: !Not [ !Or [ !Equals [!Ref EvaluatePermissionRequestCodeUriBucket, ''], !Equals [!Ref EvaluatePermissionRequestCodeUriKey, ''] ] ]
  NotHasEvaluatePermissionRequestCodeUri: !Or [ !Equals [!Ref EvaluatePermissionRequestCodeUriBucket, ''], !Equals [!Ref EvaluatePermissionRequestCodeUriKey, ''] ]

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${CognitoUserPoolName}-${Stage}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
          Mutable: true
        - AttributeDataType: String
          Name: teams
          Mutable: true
        - AttributeDataType: Boolean
          Name: admin
          Mutable: true
        - AttributeDataType: String
          Name: subscription_arn
          Mutable: true

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${CognitoUserPoolDomainName}-${AWS::AccountId}
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
      CallbackURLs:
        - http://localhost:3000
      LogoutURLs:
        - http://localhost:3000
      SupportedIdentityProviders:
        - COGNITO
      RefreshTokenValidity: 3
      GenerateSecret: false

  STSBrokerAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  GetTeamPoliciesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_policies/
      Description: Get the policy ARNs for a specific team
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE:
            Ref: TeamPreferencesTableName
          POLICIES_TABLE:
            Ref: PoliciesTableName
      Events:
        API:
          Type: Api
          Properties:
            RestApiId:
              Ref: STSBrokerAPI
            Path: /policies
            Method: GET

  StorePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: request_credentials/
      Description: Store permissions requests on DynamoDB Table
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Environment:
        Variables:
          REQUESTS_TABLE:
            Ref: RequestTableName
          POLICIES_TABLE:
            Ref: PoliciesTableName
      Events:
        API:
          Type: Api
          Properties:
            RestApiId:
              Ref: STSBrokerAPI
            Path: /credentials/request
            Method: POST

  ValidatePermissionRequestExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "CallStepFunctions"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Ref EvaluatePermissionRequestStateMachine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  ValidatePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: evaluate_request/
      Description: This function will listen to updates on permission request table,
        validate it and send to the 'EvaluatePermissionRequest' state machine. If
        request was approved, it will notify the end-user
      Handler: validate.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - ValidatePermissionRequestExecutionRole
          - Arn
      Environment:
        Variables:
          APPROVAL_URL:
            Fn::Sub: https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/credentials/approve
          TEAM_PREFERENCES_TABLE:
            Ref: TeamPreferencesTableName
          EVALUATE_REQUEST_STATE_MACHINE:
            Ref: EvaluatePermissionRequestStateMachine
          POLICIES_TABLE:
            Ref: PoliciesTableName
          USER_NOTIFICATION_TOPIC:
            Ref: UserNotificationTopic
      Events:
        DynamoDB:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt RequestCredentialsRecords.StreamArn
            StartingPosition: TRIM_HORIZON
            MaximumRetryAttempts: 5
            BatchSize: 5

  EvaluatePermissionRequestFunctionCustom:
    Type: AWS::Serverless::Function
    Condition: HasEvaluatePermissionRequestCodeUri
    Properties:
      CodeUri:
        Bucket: !Ref EvaluatePermissionRequestCodeUriBucket
        Key: !Ref EvaluatePermissionRequestCodeUriKey
      Description: This function will contain your own custom business logic to decide
        whether this permission request should be automatically approved or not
      Handler: evaluate.lambdaHandler
      Runtime:
        Ref: EvaluateLambdaRuntime
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE:
            Ref: TeamPreferencesTableName
          POLICIES_TABLE:
            Ref: PoliciesTableName

  EvaluatePermissionRequestFunctionDefault:
    Type: AWS::Serverless::Function
    Condition: NotHasEvaluatePermissionRequestCodeUri
    Properties:
      CodeUri: evaluate_request/
      Description: This function will contain a default business logic to decide whether
        this permission request should be automatically approved or not
      Handler: evaluate.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE:
            Ref: TeamPreferencesTableName
          POLICIES_TABLE:
            Ref: PoliciesTableName

  AutoApprovePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: evaluate_request/
      Description: This function will automatically approve the permission request
        by making a request to the approval URL
      Handler: auto_approve.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE:
            Ref: TeamPreferencesTableName
          APPROVAL_URL:
            Fn::Sub: https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/credentials/approve
          POLICIES_TABLE:
            Ref: PoliciesTableName

  ManualApprovePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: evaluate_request/
      Description: This function will send the approval URL to the security admin
        based on the preferred channel choice
      Handler: manual_approve.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Environment:
        Variables:
          APPROVAL_SNS_TOPIC:
            Ref: ApprovalNotificationTopic
          TEAM_PREFERENCES_TABLE:
            Ref: TeamPreferencesTableName
          APPROVAL_URL:
            Fn::Sub: https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/credentials/approve
          POLICIES_TABLE:
            Ref: PoliciesTableName

  ApproveRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: approve/
      Description: This function will actually assume the role and store the temporary
        credentials
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE:
            Ref: TeamPreferencesTableName
          REQUESTS_TABLE:
            Ref: RequestTableName
          TEMP_CREDENTIALS_TABLE:
            Ref: TempCredentialsTableName
          CONSTRUCT_URL_FUNCTION:
            Ref: ConstructLoginURLFunction
          POLICIES_TABLE:
            Ref: PoliciesTableName
      Events:
        API:
          Type: Api
          Properties:
            RestApiId:
              Ref: STSBrokerAPI
            Path: /credentials/approve
            Method: GET
            Auth:
              Authorizer: NONE
            RequestParameters:
              - method.request.querystring.requestid

  ConstructLoginURLFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: signin_url/
      Description: This function will programmatically construct a URL that gives federated users direct access to the AWS Management Console.
      Handler: constructurl.lambdaHandler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn

  RetrieveCredentialsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: retrieve_credentials/
      Description: This function will retrieve the credentials from DynamoDB table and return them to the end user.
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEMP_CREDENTIALS_TABLE: !Ref TempCredentialsTableName
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref STSBrokerAPI
            Path: /credentials
            Method: GET
            RequestParameters:
              - method.request.querystring.userid

  CreateEmailSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: email_subscription/
      Description: This function create an email subscription for each user when they signup.
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEMP_CREDENTIALS_TABLE: !Ref TempCredentialsTableName
          USER_NOTIFICATION_TOPIC: !Ref UserNotificationTopic
      Events:
        CognitoUserPoolPreSignup:
          Type: Cognito
          Properties:
            UserPool:
              Ref: CognitoUserPool
            Trigger: PostAuthentication


  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      # TODO: Avoid using Full Access manged policies
      ManagedPolicyArns:
        - !Ref STSAssumeManagedPolicy
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - !Ref InvokeLambdaManagedPolicy

  InvokeLambdaManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowLambdaInvoke
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource: "*"

  # TODO: Ideally Resource field should only contain possible IAM roles that can be assumed.
  # However, as the assumed roles can be dynamically inserted on the team_preferences table, this cannot be done
  STSAssumeManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
              - sts:TagSession
            Resource: "*"

  RequestCredentialsRecords:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref RequestTableName
      AttributeDefinitions:
        - AttributeName: requestid
          AttributeType: S
        - AttributeName: userid
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: requestid
        - KeyType: RANGE
          AttributeName: userid
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  TeamPreferencesTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TeamPreferencesTableName
      AttributeDefinitions:
        - AttributeName: team_id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: team_id

  TemporaryCredentialsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TempCredentialsTableName
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: S
      SSESpecification:
        SSEEnabled: true
      KeySchema:
        - KeyType: HASH
          AttributeName: userid
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: 'expiration'

  PoliciesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref PoliciesTableName
      AttributeDefinitions:
        - AttributeName: policy_id
          AttributeType: S
      SSESpecification:
        SSEEnabled: true
      KeySchema:
        - KeyType: HASH
          AttributeName: policy_id

  ApprovalNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ApprovalNotificationTopic

  UserNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: UserNotificationTopic

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref DefaultSecurityAdminEmailID
      FilterPolicy:
        channel:
          - default
      Protocol: email
      TopicArn: !Ref ApprovalNotificationTopic

  StepFunctionsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowStepFunctionsServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - !Sub "states.${AWS::Region}.amazonaws.com"
      Policies:
        - PolicyName: "CallLambdaFunctions"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !If
                    - HasEvaluatePermissionRequestCodeUri
                    - !Sub ${EvaluatePermissionRequestFunctionCustom.Arn}
                    - !Sub ${EvaluatePermissionRequestFunctionDefault.Arn}
                  - !GetAtt ManualApprovePermissionRequestFunction.Arn
                  - !GetAtt AutoApprovePermissionRequestFunction.Arn

  EvaluatePermissionRequestStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: EvaluatePermissionRequest
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn
      DefinitionString:
        !Sub
        - |-
          {
            "Comment": "Evaluate permission request state machine",
            "StartAt": "evaluate",
            "States": {
              "evaluate": {
                "Type": "Task",
                "Resource": "${EvaluateFunction}",
                "ResultPath": "$.evaluation",
                "OutputPath": "$",
                "Next": "choice_state"
              },
              "choice_state": {
                "Type" : "Choice",
                "Choices": [
                  {
                    "Variable": "$.evaluation.automated_approval",
                    "BooleanEquals": true,
                    "Next": "automatic_approved"
                  },
                  {
                    "Variable": "$.evaluation.automated_approval",
                    "BooleanEquals": false,
                    "Next": "manual_approval"
                  }
                ],
                "Default": "ErrorState"
              },
              "automatic_approved": {
                "Type" : "Task",
                "Resource": "${AutoApprovePermissionRequestFunction}",
                "End": true
              },
              "manual_approval": {
                "Type" : "Task",
                "Resource": "${ManualApprovePermissionRequestFunction}",
                "End": true
              },
              "ErrorState": {
                "Type": "Fail",
                "Error": "DefaultErrorState",
                "Cause": "No Matches!"
              }
            }
          }
        - EvaluateFunction: !If [ HasEvaluatePermissionRequestCodeUri, !GetAtt EvaluatePermissionRequestFunctionCustom.Arn, !GetAtt EvaluatePermissionRequestFunctionDefault.Arn ]
          AutoApprovePermissionRequestFunction: !GetAtt AutoApprovePermissionRequestFunction.Arn
          ManualApprovePermissionRequestFunction: !GetAtt ManualApprovePermissionRequestFunction.Arn

Outputs:
  ApproveRequestFunctionARN:
    Description: ARN of the approval function
    Value: !GetAtt ApproveRequestFunction.Arn
  ApproveRequestFunctionRoleARN:
    Description: IAM Role ARN of the approval function. Must be included on the Assumed Role trust relationship
    Value: !GetAtt LambdaExecutionRole.Arn
  UserNotificationTopicARN:
    Description: ARN of the user notification SNS topic
    Value: !Ref UserNotificationTopic
  ApprovalNotificationTopicName:
    Description: Name of the approval SNS topic
    Value: !GetAtt ApprovalNotificationTopic.TopicName
  ApprovalNotificationTopicARN:
    Description: ARN of the approval SNS topic
    Value: !Ref ApprovalNotificationTopic
  STSBrokerAPI:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  CognitoUserPoolARN:
    Value: !GetAtt CognitoUserPool.Arn
  CognitoUserPoolID:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientID:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
  CognitoUserPoolDomain:
    Description: Cognito User Pool domain
    Value: !Sub "https://${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
  TeamPreferencesTableName:
    Description: Name of the DynamoDB Table storing the team info and role mapping
    Value: !Ref TeamPreferencesTableName