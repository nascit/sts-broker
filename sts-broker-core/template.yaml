AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: sts-broker-core

Globals:
  Function:
    Timeout: 10

Parameters:

  CognitoUserPoolName:
    Type: String
    Default: STSBrokerUserPool
  CognitoUserPoolClientName:
    Type: String
    Default: STSBrokerUserPoolClient
  RequestTableName:
    Description: Name of the DynamoDB Table storing the requests for temporary credentials
    Type: String
    Default: permission_requests
  TeamPreferencesTableName:
    Description: Name of the DynamoDB Table storing the team info and role mapping.
    Type: String
    Default: team_preferences
  TempCredentialsTableName:
    Description: Name of the DynamoDB Table storing the temporary credentials
    Type: String
    Default: temp_credentials
#  TODO: Make Default AssumedRoleName a parameter
  EmailID:
    AllowedPattern: '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}'
    ConstraintDescription: This is not a valid email id.
    Default: timoteo.asn@gmail.com
    Description: Enter Approvers Email ID
    MaxLength: '64'
    MinLength: '1'
    Type: String
  Stage:
    Description: Stage name (Dev, Prod)
    AllowedValues:
      - Dev
      - Prod
    Type: String
    Default: Dev
    ConstraintDescription: Must specify Prod or Dev.
  # TODO: Use bukcet/key instead
  EvaluatePermissionRequestCodeUriBucket:
    Description: S3 Uri location for Lambda deployment package.
    Type: String
    Default: ''
  EvaluatePermissionRequestCodeUriKey:
    Description: S3 Uri location for Lambda deployment package.
    Type: String
    Default: ''

Conditions:
  HasEvaluatePermissionRequestCodeUri: !Not [ !Or [ !Equals [!Ref EvaluatePermissionRequestCodeUriBucket, ''], !Equals [!Ref EvaluatePermissionRequestCodeUriKey, ''] ] ]
  NotHasEvaluatePermissionRequestCodeUri: !Or [ !Equals [!Ref EvaluatePermissionRequestCodeUriBucket, ''], !Equals [!Ref EvaluatePermissionRequestCodeUriKey, ''] ]

Resources:

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${CognitoUserPoolName}-${Stage}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
        - AttributeDataType: String
          Name: team
          Mutable: true

  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false

  STSBrokerAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  StorePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: request_credentials/
      Description: Store permissions requests on DynamoDB Table
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          REQUESTS_TABLE: !Ref RequestTableName
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref STSBrokerAPI
            Path: /credentials/request
            Method: POST

  ValidatePermissionRequestExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "CallStepFunctions"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Ref EvaluatePermissionRequestStateMachine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ValidatePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: evaluate_request/
      Description: This function will listen to updates on permission request table, validate it and send to the 'EvaluatePermissionRequest' state machine. If request was approved, it will notify the end-user.
      Handler: validate.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt ValidatePermissionRequestExecutionRole.Arn
      Environment:
        Variables:
          APPROVAL_SNS_TOPIC: !Ref ApprovalNotificationTopic
          APPROVAL_URL: !Sub https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/credentials/approve
          TEAM_PREFERENCES_TABLE: !Ref TeamPreferencesTableName
          EVALUATE_REQUEST_STATE_MACHINE: !Ref EvaluatePermissionRequestStateMachine
      Events:
        DynamoDB:
          Type: DynamoDB
          Properties:
            Stream:
              'Fn::GetAtt':
                - RequestCredentialsRecords
                - StreamArn
            StartingPosition: TRIM_HORIZON
            MaximumRetryAttempts: 5
            BatchSize: 5

  EvaluatePermissionRequestFunctionCustom:
    Type: AWS::Serverless::Function
    Condition: HasEvaluatePermissionRequestCodeUri
    Properties:
      CodeUri:
        Bucket: !Ref EvaluatePermissionRequestCodeUriBucket
        Key: !Ref EvaluatePermissionRequestCodeUriKey
      Description: This function will contain your own custom business logic to decide whether this permission request should be automatically approved or not.
      Handler: evaluate.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE: !Ref TeamPreferencesTableName

  EvaluatePermissionRequestFunctionDefault:
    Type: AWS::Serverless::Function
    Condition: NotHasEvaluatePermissionRequestCodeUri
    Properties:
      CodeUri: evaluate_request/
      Description: This function will contain a default business logic to decide whether this permission request should be automatically approved or not.
      Handler: evaluate.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE: !Ref TeamPreferencesTableName

  AutoApprovePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: evaluate_request/
      Description: This function will automatically approve the permission request by making a request to the approval URL.
      Handler: approve.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE: !Ref TeamPreferencesTableName
          APPROVAL_URL: !Sub https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/credentials/approve

  ManualApprovePermissionRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: evaluate_request/
      Description: This function will send the approval URL to the security admin based on the preferred channel choice.
      Handler: manual_approve.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE: !Ref TeamPreferencesTableName
          APPROVAL_URL: !Sub https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/credentials/approve

  ApproveRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: approve/
      Description: This function will actually assume the role and store the temporary credentials.
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEAM_PREFERENCES_TABLE: !Ref TeamPreferencesTableName
          REQUESTS_TABLE: !Ref RequestTableName
          TEMP_CREDENTIALS_TABLE: !Ref TempCredentialsTableName
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref STSBrokerAPI
            Path: /credentials/approve
            Method: GET
            Auth:
              Authorizer: NONE # TODO: Secure this API
            RequestParameters:
              - method.request.querystring.requestid

  RetrieveCredentialsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: retrieve_credentials/
      Description: This function will retrieve the credentials from DynamoDB table and return them to the end user.
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TEMP_CREDENTIALS_TABLE: !Ref TempCredentialsTableName
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref STSBrokerAPI
            Path: /credentials/get
            Method: GET
            RequestParameters:
              - method.request.querystring.userid

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      # TODO: Avoid using Full Access manged policies
      ManagedPolicyArns:
        - !Ref STSAssumeManagedPolicy
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  STSAssumeManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowAssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: "*" #!GetAtt AssumedRole.Arn # Resource field should contain every possible role that can be assumed.

  # For simplicity, a default role to be assumed is created within the stack,
  # but in real world this role should already be created and mapped on TeamPreferencesTableName
  AssumedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaExecutionRole.Arn
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub "DefaultAssumedRole-${Stage}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  RequestCredentialsRecords:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      TableName: !Ref RequestTableName
      AttributeDefinitions:
        - AttributeName: requestid
          AttributeType: S
        - AttributeName: userid
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: requestid
        - KeyType: RANGE
          AttributeName: userid
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  TeamPreferencesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      TableName: !Ref TeamPreferencesTableName
      AttributeDefinitions:
        - AttributeName: teamid
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: teamid

  TemporaryCredentialsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      TableName: !Ref TempCredentialsTableName
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: S
      SSESpecification:
        SSEEnabled: true
      KeySchema:
        - KeyType: HASH
          AttributeName: userid
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: 'expiration'

  ApprovalNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ApprovalNotificationTopic

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref EmailID
      FilterPolicy:
        channel:
          - email
      Protocol: email
      TopicArn: !Ref ApprovalNotificationTopic

  StepFunctionsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowStepFunctionsServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - !Sub "states.${AWS::Region}.amazonaws.com"
      Policies:
        - PolicyName: "CallLambdaFunctions"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  !If
                  - HasEvaluatePermissionRequestCodeUri
                  - !Sub ${EvaluatePermissionRequestFunctionCustom.Arn}
                  - !Sub ${EvaluatePermissionRequestFunctionDefault.Arn}


  EvaluatePermissionRequestStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
#      DependsOn: ValidatePermissionRequestFunction
      StateMachineName: EvaluatePermissionRequest
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn
      DefinitionString: !Sub |-
        {
          "Comment": "Evaluate permission request",
          "StartAt": "Evaluate",
          "States": {
            "Evaluate": {
              "Type": "Task",
              "Resource": "${ApproveRequestFunction.Arn}",
              "Next": "ChoiceState"
            },
            "ChoiceState": {
              "Type" : "Choice",
              "Choices": [
                {
                  "Variable": "$.automated_approval",
                  "BooleanEquals": true,
                  "Next": "automatic_approved"
                },
                {
                  "Variable": "$.automated_approval",
                  "BooleanEquals": false,
                  "Next": "manual_approval"
                }
              ],
              "Default": "DefaultState"
            },
            "automatic_approved": {
              "Type" : "Task",
              "Resource": "${AutoApprovePermissionRequestFunction.Arn}",
              "End": true
            },
            "manual_approval": {
              "Type" : "Task",
              "Resource": "${ManualApprovePermissionRequestFunction.Arn}",
              "End": true
            },
            "DefaultState": {
              "Type": "Fail",
              "Error": "DefaultStateError",
              "Cause": "No Matches!"
            }
          }
        }

Outputs:
  AssumedRoleARN:
    Description: Default assumed Role ARN
    Value: !GetAtt AssumedRole.Arn
  ApprovalNotificationTopicName:
    Description: Name of the approval SNS topic
    Value: !GetAtt ApprovalNotificationTopic.TopicName
  ApprovalNotificationTopicARN:
    Description: ARN of the approval SNS topic
    Value: !Ref ApprovalNotificationTopic
  STSBrokerAPI:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${STSBrokerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  CognitoUserPoolARN:
    Value: !GetAtt MyCognitoUserPool.Arn
  CognitoUserPoolID:
    Description: Cognito User Pool ID
    Value: !Ref MyCognitoUserPool
  CognitoUserPoolClientID:
    Description: Cognito User Pool Client ID
    Value: !Ref MyCognitoUserPoolClient