AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Stage:
    Description: Stage name (Dev, Prod)
    AllowedValues:
      - Dev
      - Prod
    Type: String
    Default: Dev
    ConstraintDescription: Must specify Prod or Dev
  LogLevel:
    Type: String
    Default: INFO
  QueryLimit:
    Type: Number
    Default: 20
    Description: Maximum number of items to return from a single query
  RetentionInDays:
    Type: Number
    Default: 30
    Description: Retention in days for CloudWatch log groups
  CognitoUserPoolID:
    Type: String
    Description: Cognito User Pool ID
  PoliciesTableName:
    Description: Name of the DynamoDB Table storing STS Broker policies
    Type: String
    Default: policies
  TeamPreferencesTableName:
    Description: Name of the DynamoDB Table storing the team info/preferences
    Type: String
    Default: team_preferences
  ApproveRequestFunctionRoleARN:
    Description: IAM Role ARN of the approval function. Must be included on the Assumed Role trust relationship
    Type: String

Resources:
  ###############
  # GRAPHQL API #
  ###############
  Api:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "stsbroker-${Stage}-admin-api"
      AuthenticationType: API_KEY
      AdditionalAuthenticationProviders:
        - AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
            AwsRegion: !Ref AWS::Region
            UserPoolId: !Ref CognitoUserPoolID
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt ApiLoggingRole.Arn
        FieldLogLevel: ALL
      XrayEnabled: true

  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/appsync/apis/${Api.ApiId}"
      RetentionInDays: !Ref RetentionInDays

  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DefinitionS3Location: "resources/api.graphql"

  ############
  # POLICIES #
  ############
  PoliciesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DeliveryTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PoliciesTableName}"

  PoliciesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: PoliciesTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt PoliciesRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref PoliciesTableName

  # TODO: This resolver also needs to edit the base_role trust relationship to include ApproveRequestFunctionRoleARN
  CreatePolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt PoliciesDataSource.Name
      FieldName: createPolicies
      TypeName: Mutation
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "policy_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.policy_id),
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input),
          "condition": {
            "expression": "attribute_not_exists(#policy_id)",
            "expressionNames": {
              "#policy_id": "policy_id",
            },
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  UpdatePolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt PoliciesDataSource.Name
      FieldName: updatePolicies
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "policy_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.policy_id),
          },

          ## Set up some space to keep track of things we're updating **
          #set( $expNames  = {} )
          #set( $expValues = {} )
          #set( $expSet = {} )
          #set( $expAdd = {} )
          #set( $expRemove = [] )

          ## Iterate through each argument, skipping keys **
          #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, ["policy_id"]).entrySet() )
            #if( $util.isNull($entry.value) )
              ## If the argument is set to "null", then remove that attribute from the item in DynamoDB **

              #set( $discard = ${expRemove.add("#${entry.key}")} )
              $!{expNames.put("#${entry.key}", "${entry.key}")}
            #else
              ## Otherwise set (or update) the attribute on the item in DynamoDB **

              $!{expSet.put("#${entry.key}", ":${entry.key}")}
              $!{expNames.put("#${entry.key}", "${entry.key}")}
              $!{expValues.put(":${entry.key}", $util.dynamodb.toDynamoDB($entry.value))}
            #end
          #end

          ## Start building the update expression, starting with attributes we're going to SET **
          #set( $expression = "" )
          #if( !${expSet.isEmpty()} )
            #set( $expression = "SET" )
            #foreach( $entry in $expSet.entrySet() )
              #set( $expression = "${expression} ${entry.key} = ${entry.value}" )
              #if ( $foreach.hasNext )
                #set( $expression = "${expression}," )
              #end
            #end
          #end

          ## Continue building the update expression, adding attributes we're going to ADD **
          #if( !${expAdd.isEmpty()} )
            #set( $expression = "${expression} ADD" )
            #foreach( $entry in $expAdd.entrySet() )
              #set( $expression = "${expression} ${entry.key} ${entry.value}" )
              #if ( $foreach.hasNext )
                #set( $expression = "${expression}," )
              #end
            #end
          #end

          ## Continue building the update expression, adding attributes we're going to REMOVE **
          #if( !${expRemove.isEmpty()} )
            #set( $expression = "${expression} REMOVE" )

            #foreach( $entry in $expRemove )
              #set( $expression = "${expression} ${entry}" )
              #if ( $foreach.hasNext )
                #set( $expression = "${expression}," )
              #end
            #end
          #end

          ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **
          "update": {
            "expression": "${expression}",
            #if( !${expNames.isEmpty()} )
              "expressionNames": $utils.toJson($expNames),
            #end
            #if( !${expValues.isEmpty()} )
              "expressionValues": $utils.toJson($expValues),
            #end
          },

          "condition": {
            "expression": "attribute_exists(#policy_id)",
            "expressionNames": {
              "#policy_id": "policy_id",
            },
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  DeletePolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt PoliciesDataSource.Name
      FieldName: deletePolicies
      TypeName: Mutation
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "policy_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.policy_id),
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  GetPoliciesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt PoliciesDataSource.Name
      FieldName: getPolicies
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "policy_id": $util.dynamodb.toDynamoDBJson($ctx.args.policy_id),
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  ListPoliciesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt PoliciesDataSource.Name
      FieldName: listPolicies
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "filter": #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,
          "limit": ${QueryLimit},
          "nextToken": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)